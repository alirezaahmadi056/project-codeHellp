import android.annotation.SuppressLint
import android.app.Application
import android.app.NotificationChannel
import android.app.NotificationManager
import android.os.Build

@SuppressLint("Registered")
class App : Application() {

    companion object {
        val channel_ID = "exampleServiceChannel"
    }

    override fun onCreate() {
        super.onCreate()

        createNotificationChannel()

    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val serviceChannel = NotificationChannel(
                    channel_ID,
                    "Example Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            )
            val manager = getSystemService(NotificationManager::class.java)
            manager.createNotificationChannel(serviceChannel)
        }
    }

}

manifests:

android:name=".App"

<service android:name=".ExampleService"/>

New Classes:

import android.annotation.TargetApi
import android.app.Notification
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.IBinder

class ExampleService : Service() {

    override fun onCreate() {
        super.onCreate()
    }

    @TargetApi(Build.VERSION_CODES.O)
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {

        val intent = Intent(this, Main3Activity::class.java)
        val pending = PendingIntent.getActivity(this, 0, intent, 0)
        val note = Notification.Builder(this)
                .setTicker("")
                .setContentTitle("Title")
                .setContentText("Text Content Quality")
                .setSmallIcon(R.drawable.icon1)
                .setContentIntent(pending).notification
        note.flags = Notification.FLAG_AUTO_CANCEL
        val nm = this.getSystemService(NOTIFICATION_SERVICE) as NotificationManager
//        nm.notify(0, note)
        startForeground(1, note)

        return START_NOT_STICKY
    }

    override fun onDestroy() {
        super.onDestroy()
    }

    override fun onBind(intent: Intent?): IBinder {
        return null!!
    }

}

mainActivity:

button2.setOnClickListener {

            /*val pm = packageManager
            val cn = ComponentName(this, MyBroadCast::class.java)
            pm.setComponentEnabledSetting(cn, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP)*/

            val intent = Intent(this, ExampleService::class.java)
            intent.putExtra("intentExtra", 30)
            ContextCompat.startForegroundService(this, intent)

        }

        button3.setOnClickListener {
            val intent = Intent(this, ExampleService::class.java)
            intent.putExtra("intentExtra", 30)
            stopService(intent)
        }